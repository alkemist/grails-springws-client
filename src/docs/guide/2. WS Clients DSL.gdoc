This plugin is built on top of "Spring's WS* client support":http://static.springsource.org/spring-ws/site/reference/html/client.html"

There are some core Spring *WS Client* concepts that you should at least be aware of.

h2. WebServiceTemplate 

Spring-WS provides a "WebServiceTemplate":http://static.springsource.org/spring-ws/site/apidocs/index.html which provides the mechanism to *marshal*, *send*, and *receive* the requests.

URIs and Transports
The WebServiceTemplate class uses an URI as the message destination. You can either set a defaultUri property on the template itself, or supply an URI explicitly when calling a method on the template. The URI will be resolved into a WebServiceMessageSender, which is responsible for sending the XML message across a transport layer. You can set one or more message senders using the messageSender or messageSenders properties of the WebServiceTemplate class.

There are two implementations of the WebServiceMessageSender interface for sending messages via HTTP. The default implementation is the HttpUrlConnectionMessageSender, which uses the facilities provided by Java itself. The alternative is the CommonsHttpMessageSender, which uses the Jakarta Commons HttpClient. Use the latter if you need more advanced and easy-to-use functionality (such as authentication, HTTP connection pooling, and so forth).
To use the HTTP transport, either set the defaultUri to something like http://example.com/services, or supply the uri parameter for one of the methods.
"Jakarta Commons HttpClient":http://jakarta.apache.org/commons/httpclient

org.springframework.ws.client.core.WebServiceMessageCallback
org.springframework.ws.soap.client.core.SoapActionCallback



h2. Configuration

The "MessageConverter":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/support/converter/MessageConverter.html abstraction conveniently allows pluggable message conversion. By default, this plugin uses Spring's "SimpleMessageConverter":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/support/converter/SimpleMessageConverter.html which handles 'standard' message payloads and JMS Message types. 

h2. 

A listener container polls a JMS destination for messages. Each listener (i.e. each service method that receives JMS messages) has it's own listener container.

This plugin uses the "DefaultMessageListenerContainer":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/listener/DefaultMessageListenerContainer.html implementation.

h2. 

A listener adapter connects a listener container to the actual destination of the message. It handles message conversion amongst other things.

By default, this plugin uses a "MessageListenerAdapter":http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html subclass that is Grails aware and sets up the necessary Grails environment for listener methods (e.g. Hibernate session).
